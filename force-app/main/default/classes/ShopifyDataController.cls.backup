/**
 * @description Controlador para integraci√≥n con Shopify usando objetos nativos de Salesforce
 * @author Sistema de Integraci√≥n Shopify
 * @date 2025-01-27
 */
public with sharing class ShopifyDataController {
    
    // ========================================
    // M√âTODOS DE CONSULTA PARA LWC (OBJETOS NATIVOS)
    // ========================================
    
    /**
     * @description Obtiene todas las √≥rdenes de Shopify desde Order nativo
     */
    @AuraEnabled(cacheable=true)
    public static List<Order> getShopifyOrders() {
        try {
            return [
                SELECT Id, OrderNumber, Status, EffectiveDate, TotalAmount, 
                       AccountId, Account.Name, ShopifyOrderId__c, ShopifyOrderNumber__c
                FROM Order 
                WHERE ShopifyOrderId__c != null
                ORDER BY EffectiveDate DESC
                LIMIT 1000
            ];
        } catch (Exception e) {
            throw new AuraHandledException('Error al obtener √≥rdenes: ' + e.getMessage());
        }
    }
    
    /**
     * @description Obtiene todos los productos de Shopify desde Product2 nativo
     */
    @AuraEnabled(cacheable=true)
    public static List<Product2> getShopifyProducts() {
        try {
            List<Product2> products = [
                SELECT Id, Name, ProductCode, Family, IsActive, ShopifyProductId__c, Description,
                       (SELECT Id, UnitPrice FROM PricebookEntries WHERE Pricebook2.IsStandard = true LIMIT 1)
                FROM Product2 
                WHERE ShopifyProductId__c != null
                ORDER BY Name ASC
                LIMIT 1000
            ];
            
            // Agregar precio a cada producto (usando variable temporal)
            for (Product2 product : products) {
                if (!product.PricebookEntries.isEmpty()) {
                    // El precio se obtiene desde PricebookEntry, no se asigna a Product2
                    System.debug('üí∞ Precio para ' + product.Name + ': ' + product.PricebookEntries[0].UnitPrice);
                }
            }
            
            return products;
        } catch (Exception e) {
            throw new AuraHandledException('Error al obtener productos: ' + e.getMessage());
        }
    }
    
    /**
     * @description Obtiene todos los clientes de Shopify desde Contact
     */
    @AuraEnabled(cacheable=true)
    public static List<Contact> getShopifyCustomers() {
        try {
            return [
                SELECT Id, FirstName, LastName, Email, Phone, 
                       AccountId, Account.Name, ShopifyCustomerId__c
                FROM Contact 
                WHERE ShopifyCustomerId__c != null
                ORDER BY FirstName ASC
                LIMIT 1000
            ];
        } catch (Exception e) {
            throw new AuraHandledException('Error al obtener clientes: ' + e.getMessage());
        }
    }
    
    // ========================================
    // M√âTODOS DE SINCRONIZACI√ìN PRINCIPALES
    // ========================================
    
    /**
     * @description Sincroniza todos los datos hist√≥ricos de Shopify
     */
    @AuraEnabled
    public static void syncHistoricalDataFromShopify() {
        try {
            System.debug('üöÄ INICIANDO SINCRONIZACI√ìN HIST√ìRICA DE SHOPIFY');
            
            // Configuraci√≥n hardcodeada
            String shopDomain = 'michelltemp.myshopify.com';
            String apiVersion = '2025-07';
            
            System.debug('üìã Configuraci√≥n:');
            System.debug('   - Shop Domain: ' + shopDomain);
            System.debug('   - API Version: ' + apiVersion);
            
            // Sincronizar productos
            System.debug('üîÑ Sincronizando productos...');
            syncProductsOnly();
            
            // Sincronizar clientes
            System.debug('üîÑ Sincronizando clientes...');
            syncCustomersOnly();
            
            // Sincronizar √≥rdenes
            System.debug('üîÑ Sincronizando √≥rdenes...');
            syncOrdersOnly();
            
            System.debug('‚úÖ SINCRONIZACI√ìN HIST√ìRICA COMPLETADA');
        } catch (Exception e) {
            System.debug('‚ùå ERROR en sincronizaci√≥n hist√≥rica: ' + e.getMessage());
            System.debug('‚ùå Stack trace: ' + e.getStackTraceString());
            throw new AuraHandledException('Error al sincronizar datos hist√≥ricos: ' + e.getMessage());
        }
    }
    
    /**
     * @description Sincroniza solo productos de Shopify
     */
    @AuraEnabled
    public static void syncProductsOnly() {
        try {
            System.debug('üîÑ SINCRONIZANDO SOLO PRODUCTOS - M√âTODO SIMPLIFICADO');
            
            // Obtener moneda de la tienda
            String shopCurrency = getShopCurrency();
            System.debug('üí∞ Moneda detectada: ' + shopCurrency);
            
            // Obtener productos usando query simple que funciona
            System.debug('üì° Obteniendo productos con query simple...');
            List<Map<String, Object>> productNodes = getProductsSimple();
            System.debug('üìä Productos obtenidos: ' + productNodes.size());
            
            // Sincronizar productos b√°sicos (sin precios por ahora)
            System.debug('üîÑ Sincronizando productos b√°sicos...');
            syncProductsBasic(productNodes, shopCurrency);
            
            System.debug('‚úÖ PRODUCTOS SINCRONIZADOS EXITOSAMENTE');
        } catch (Exception e) {
            System.debug('‚ùå ERROR sincronizando productos: ' + e.getMessage());
            System.debug('‚ùå Stack trace: ' + e.getStackTraceString());
            throw new AuraHandledException('Error sincronizando productos: ' + e.getMessage());
        }
    }
    
    /**
     * @description Obtiene productos con query simple que funciona
     */
    private static List<Map<String, Object>> getProductsSimple() {
        try {
            System.debug('üîÑ OBTENIENDO PRODUCTOS SIMPLES');
            
            String shopDomain = 'michelltemp.myshopify.com';
            String apiVersion = '2025-07';
            String endpoint = 'https://' + shopDomain + '/admin/api/' + apiVersion + '/graphql.json';
            
            // Query simple que sabemos que funciona
            String query = '{"query": "{ products(first: 10) { edges { node { id title handle productType status description tags } } } }"}';
            System.debug('üìù Query: ' + query);
            
            HttpRequest req = new HttpRequest();
            req.setEndpoint(endpoint);
            req.setMethod('POST');
            req.setHeader('Content-Type', 'application/json');
            req.setHeader('X-Shopify-Access-Token', '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');
            req.setBody(query);
            req.setTimeout(120000);
            
            Http http = new Http();
            HttpResponse res = http.send(req);
            
            System.debug('üìä Status: ' + res.getStatusCode());
            System.debug('üìä Body: ' + res.getBody());
            
            if (res.getStatusCode() == 200) {
                Map<String, Object> responseMap = (Map<String, Object>)JSON.deserializeUntyped(res.getBody());
                Map<String, Object> data = (Map<String, Object>)responseMap.get('data');
                Map<String, Object> products = (Map<String, Object>)data.get('products');
                List<Object> edges = (List<Object>)products.get('edges');
                
                List<Map<String, Object>> productNodes = new List<Map<String, Object>>();
                for (Object edgeObj : edges) {
                    Map<String, Object> edge = (Map<String, Object>)edgeObj;
                    Map<String, Object> node = (Map<String, Object>)edge.get('node');
                    if (node != null) {
                        productNodes.add(node);
                    }
                }
                
                System.debug('‚úÖ Productos obtenidos: ' + productNodes.size());
                return productNodes;
            } else {
                throw new CalloutException('Error HTTP: ' + res.getStatusCode() + ' - ' + res.getBody());
            }
        } catch (Exception e) {
            System.debug('‚ùå ERROR obteniendo productos simples: ' + e.getMessage());
            throw new AuraHandledException('Error obteniendo productos: ' + e.getMessage());
        }
    }
    
    /**
     * @description Sincroniza productos b√°sicos (sin precios)
     */
    private static void syncProductsBasic(List<Map<String, Object>> productNodes, String shopCurrency) {
        try {
            System.debug('üîÑ SINCRONIZANDO PRODUCTOS B√ÅSICOS');
            
            List<Product2> productsToUpsert = new List<Product2>();
            
            for (Map<String, Object> node : productNodes) {
                try {
                    Product2 product = new Product2();
                    
                    // Extraer ID de Shopify
                    String shopifyId = String.valueOf(node.get('id'));
                    if (shopifyId.startsWith('gid://shopify/Product/')) {
                        product.ShopifyProductId__c = shopifyId.replace('gid://shopify/Product/', '');
                    } else {
                        product.ShopifyProductId__c = shopifyId;
                    }
                    
                    // Mapear datos b√°sicos
                    product.Name = (String)node.get('title');
                    product.ProductCode = (String)node.get('handle');
                    product.Description = (String)node.get('description');
                    
                    // Mapear categor√≠a
                    String productType = (String)node.get('productType');
                    List<Object> tags = (List<Object>)node.get('tags');
                    
                    if (String.isNotBlank(productType)) {
                        product.Family = productType;
                    } else if (tags != null && !tags.isEmpty()) {
                        product.Family = (String)tags[0];
                    } else {
                        product.Family = 'General';
                    }
                    
                    // Estado activo
                    String status = (String)node.get('status');
                    product.IsActive = 'ACTIVE'.equalsIgnoreCase(status);
                    
                    productsToUpsert.add(product);
                    System.debug('üì¶ Producto mapeado: ' + product.Name + ' (' + product.ShopifyProductId__c + ')');
                    
                } catch (Exception e) {
                    System.debug('‚ùå Error mapeando producto: ' + e.getMessage());
                }
            }
            
            if (!productsToUpsert.isEmpty()) {
                System.debug('üíæ Upsertando ' + productsToUpsert.size() + ' productos');
                upsert productsToUpsert Product2.ShopifyProductId__c;
                System.debug('‚úÖ Productos sincronizados exitosamente');
            }
            
        } catch (Exception e) {
            System.debug('‚ùå ERROR sincronizando productos b√°sicos: ' + e.getMessage());
            throw new AuraHandledException('Error sincronizando productos: ' + e.getMessage());
        }
    }
    
    /**
     * @description Sincroniza solo clientes de Shopify
     */
    @AuraEnabled
    public static void syncCustomersOnly() {
        try {
            System.debug('üîÑ SINCRONIZANDO SOLO CLIENTES');
            
            // Obtener clientes desde GraphQL
            List<Map<String, Object>> customerNodes = getCustomersFromGraphQL();
            
            // Sincronizar usando el servicio
            ShopifySyncService.syncCustomers(customerNodes);
            
            System.debug('‚úÖ CLIENTES SINCRONIZADOS EXITOSAMENTE');
        } catch (Exception e) {
            System.debug('‚ùå ERROR sincronizando clientes: ' + e.getMessage());
            throw new AuraHandledException('Error sincronizando clientes: ' + e.getMessage());
        }
    }
    
    /**
     * @description Sincroniza solo √≥rdenes de Shopify
     */
    @AuraEnabled
    public static void syncOrdersOnly() {
        try {
            System.debug('üîÑ SINCRONIZANDO SOLO √ìRDENES');
            
            // Obtener √≥rdenes desde GraphQL
            List<Map<String, Object>> orderNodes = getOrdersFromGraphQL();
            
            // Sincronizar usando el servicio
            ShopifySyncService.syncOrders(orderNodes);
            
            System.debug('‚úÖ √ìRDENES SINCRONIZADAS EXITOSAMENTE');
        } catch (Exception e) {
            System.debug('‚ùå ERROR sincronizando √≥rdenes: ' + e.getMessage());
            throw new AuraHandledException('Error sincronizando √≥rdenes: ' + e.getMessage());
        }
    }
    
    /**
     * @description Limpia datos de prueba de objetos nativos
     */
    @AuraEnabled
    public static String limpiarBaseDeDatos() {
        try {
            System.debug('üßπ INICIANDO LIMPIEZA DE BASE DE DATOS');
            
            // Contar registros antes de eliminar
            Integer ordersCount = [SELECT COUNT() FROM Order WHERE ShopifyOrderId__c != null];
            Integer productsCount = [SELECT COUNT() FROM Product2 WHERE ShopifyProductId__c != null];
            Integer accountsCount = [SELECT COUNT() FROM Account WHERE ShopifyCustomerId__c != null];
            Integer contactsCount = [SELECT COUNT() FROM Contact WHERE ShopifyCustomerId__c != null];
            
            System.debug('üìä Registros a eliminar:');
            System.debug('   - √ìrdenes: ' + ordersCount);
            System.debug('   - Productos: ' + productsCount);
            System.debug('   - Cuentas: ' + accountsCount);
            System.debug('   - Contactos: ' + contactsCount);
            
            // Eliminar directamente aqu√≠ para evitar problemas
            if (ordersCount > 0) {
                List<Order> ordersToDelete = [SELECT Id FROM Order WHERE ShopifyOrderId__c != null];
                delete ordersToDelete;
                System.debug('üóëÔ∏è Eliminadas ' + ordersToDelete.size() + ' √≥rdenes');
            }
            
            if (productsCount > 0) {
                List<Product2> productsToDelete = [SELECT Id FROM Product2 WHERE ShopifyProductId__c != null];
                delete productsToDelete;
                System.debug('üóëÔ∏è Eliminados ' + productsToDelete.size() + ' productos');
            }
            
            if (accountsCount > 0) {
                List<Account> accountsToDelete = [SELECT Id FROM Account WHERE ShopifyCustomerId__c != null];
                delete accountsToDelete;
                System.debug('üóëÔ∏è Eliminadas ' + accountsToDelete.size() + ' cuentas');
            }
            
            if (contactsCount > 0) {
                List<Contact> contactsToDelete = [SELECT Id FROM Contact WHERE ShopifyCustomerId__c != null];
                delete contactsToDelete;
                System.debug('üóëÔ∏è Eliminados ' + contactsToDelete.size() + ' contactos');
            }
            
            System.debug('‚úÖ LIMPIEZA DE BASE DE DATOS COMPLETADA');
            
            return 'Limpieza completada. Eliminados: ' + ordersCount + ' √≥rdenes, ' + 
                   productsCount + ' productos, ' + accountsCount + ' cuentas, ' + 
                   contactsCount + ' contactos.';
                   
        } catch (Exception e) {
            System.debug('‚ùå ERROR en limpieza: ' + e.getMessage());
            System.debug('‚ùå Stack trace: ' + e.getStackTraceString());
            throw new AuraHandledException('Error al limpiar base de datos: ' + e.getMessage());
        }
    }
    
    /**
     * @description M√©todo ultra-simple: solo obtener y mostrar productos
     */
    @AuraEnabled
    public static String testUltraSimple() {
        try {
            System.debug('üß™ PRUEBA ULTRA-SIMPLE');
            
            // Solo obtener productos y mostrar informaci√≥n b√°sica
            String shopDomain = 'michelltemp.myshopify.com';
            String apiVersion = '2025-07';
            String endpoint = 'https://' + shopDomain + '/admin/api/' + apiVersion + '/graphql.json';
            
            String query = '{"query": "{ products(first: 2) { edges { node { id title } } } }"}';
            System.debug('üìù Query: ' + query);
            
            HttpRequest req = new HttpRequest();
            req.setEndpoint(endpoint);
            req.setMethod('POST');
            req.setHeader('Content-Type', 'application/json');
            req.setHeader('X-Shopify-Access-Token', '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');
            req.setBody(query);
            req.setTimeout(30000);
            
            Http http = new Http();
            HttpResponse res = http.send(req);
            
            System.debug('üìä Status: ' + res.getStatusCode());
            System.debug('üìä Body: ' + res.getBody());
            
            if (res.getStatusCode() == 200) {
                Map<String, Object> responseMap = (Map<String, Object>)JSON.deserializeUntyped(res.getBody());
                System.debug('‚úÖ ResponseMap deserializado');
                System.debug('üìä ResponseMap completo: ' + JSON.serialize(responseMap));
                
                if (responseMap == null) {
                    return 'Error: ResponseMap es null';
                }
                
                // Verificar si hay errores en la respuesta
                if (responseMap.containsKey('errors')) {
                    List<Object> errors = (List<Object>)responseMap.get('errors');
                    return 'Errores GraphQL: ' + JSON.serialize(errors);
                }
                
                Map<String, Object> data = (Map<String, Object>)responseMap.get('data');
                if (data == null) {
                    return 'Error: Data es null. ResponseMap: ' + JSON.serialize(responseMap);
                }
                
                Map<String, Object> products = (Map<String, Object>)data.get('products');
                if (products == null) {
                    return 'Error: Products es null';
                }
                
                List<Object> edges = (List<Object>)products.get('edges');
                if (edges == null) {
                    return 'Error: Edges es null';
                }
                
                String result = 'Productos encontrados: ' + edges.size();
                for (Object edgeObj : edges) {
                    if (edgeObj != null) {
                        Map<String, Object> edge = (Map<String, Object>)edgeObj;
                        if (edge != null) {
                            Map<String, Object> node = (Map<String, Object>)edge.get('node');
                            if (node != null) {
                                String title = (String)node.get('title');
                                String id = (String)node.get('id');
                                if (title != null && id != null) {
                                    result += ' | ' + title + ' (' + id + ')';
                                    System.debug('üì¶ Producto: ' + title + ' - ID: ' + id);
                                }
                            }
                        }
                    }
                }
                
                return result;
            } else {
                return 'Error HTTP: ' + res.getStatusCode() + ' - ' + res.getBody();
            }
            
        } catch (Exception e) {
            System.debug('‚ùå ERROR en prueba ultra-simple: ' + e.getMessage());
            System.debug('‚ùå Stack trace: ' + e.getStackTraceString());
            throw new AuraHandledException('Error en prueba ultra-simple: ' + e.getMessage());
        }
    }
    
    /**
     * @description M√©todo de prueba completo paso a paso
     */
    @AuraEnabled
    public static String testCompleteSync() {
        try {
            System.debug('üß™ PRUEBA COMPLETA PASO A PASO');
            
            // Paso 1: Obtener moneda
            System.debug('üìã Paso 1: Obteniendo moneda...');
            String shopCurrency = getShopCurrency();
            System.debug('‚úÖ Moneda obtenida: ' + shopCurrency);
            
            // Paso 2: Obtener productos
            System.debug('üìã Paso 2: Obteniendo productos...');
            List<Map<String, Object>> productNodes = getProductsSimple();
            System.debug('‚úÖ Productos obtenidos: ' + productNodes.size());
            
            // Paso 3: Mapear productos
            System.debug('üìã Paso 3: Mapeando productos...');
            List<Product2> productsToUpsert = new List<Product2>();
            
            for (Map<String, Object> node : productNodes) {
                try {
                    Product2 product = new Product2();
                    
                    // Extraer ID de Shopify
                    String shopifyId = String.valueOf(node.get('id'));
                    if (shopifyId.startsWith('gid://shopify/Product/')) {
                        product.ShopifyProductId__c = shopifyId.replace('gid://shopify/Product/', '');
                    } else {
                        product.ShopifyProductId__c = shopifyId;
                    }
                    
                    // Mapear datos b√°sicos
                    product.Name = (String)node.get('title');
                    product.ProductCode = (String)node.get('handle');
                    product.Description = (String)node.get('description');
                    
                    // Mapear categor√≠a
                    String productType = (String)node.get('productType');
                    List<Object> tags = (List<Object>)node.get('tags');
                    
                    if (String.isNotBlank(productType)) {
                        product.Family = productType;
                    } else if (tags != null && !tags.isEmpty()) {
                        product.Family = (String)tags[0];
                    } else {
                        product.Family = 'General';
                    }
                    
                    // Estado activo
                    String status = (String)node.get('status');
                    product.IsActive = 'ACTIVE'.equalsIgnoreCase(status);
                    
                    productsToUpsert.add(product);
                    System.debug('üì¶ Producto mapeado: ' + product.Name);
                    
                } catch (Exception e) {
                    System.debug('‚ùå Error mapeando producto: ' + e.getMessage());
                }
            }
            
            System.debug('‚úÖ Productos mapeados: ' + productsToUpsert.size());
            
            // Paso 4: Upsertar productos

            // Paso 5: Crear Price Book Entries
            System.debug("Ì≥ã Paso 5: Creando Price Book Entries...");
            if (!productsToUpsert.isEmpty()) {
                // Obtener Standard Pricebook ID
                Id standardPricebookId = [SELECT Id FROM Pricebook2 WHERE IsStandard = true LIMIT 1].Id;
                
                // Crear Price Book Entries
                List<PricebookEntry> pbesToInsert = new List<PricebookEntry>();
                
                for (Product2 product : productsToUpsert) {
                    // Crear Price Book Entry con precio por defecto
                    PricebookEntry pbe = new PricebookEntry();
                    pbe.Pricebook2Id = standardPricebookId;
                    pbe.Product2Id = product.Id;
                    pbe.UnitPrice = 100.00; // Precio por defecto para prueba
                    pbe.IsActive = true;
                    pbe.UseStandardPrice = false;
                    pbesToInsert.add(pbe);
                    System.debug("Ì≤∞ Price Book Entry creado para: " + product.Name + " - Precio: 100.00");
                }
                
                if (!pbesToInsert.isEmpty()) {
                    insert pbesToInsert;
                    System.debug("‚úÖ Price Book Entries creados: " + pbesToInsert.size());
                }
            }
            System.debug('üìã Paso 4: Upsertando productos...');
            if (!productsToUpsert.isEmpty()) {
                upsert productsToUpsert Product2.ShopifyProductId__c;
                System.debug('‚úÖ Productos upsertados exitosamente');
            }
            
            return 'Prueba completa exitosa - Productos: ' + productsToUpsert.size();
            
        } catch (Exception e) {
            System.debug('‚ùå ERROR en prueba completa: ' + e.getMessage());
            System.debug('‚ùå Stack trace: ' + e.getStackTraceString());
            throw new AuraHandledException('Error en prueba completa: ' + e.getMessage());
        }
    }
    
    /**
     * @description M√©todo temporal para probar solo la obtenci√≥n de productos
     */
    @AuraEnabled
    public static String testGetProductsOnly() {
        try {
            System.debug('üß™ PROBANDO SOLO OBTENCI√ìN DE PRODUCTOS');
            
            // Probar solo la conexi√≥n HTTP primero
            String shopDomain = 'michelltemp.myshopify.com';
            String apiVersion = '2025-07';
            String endpoint = 'https://' + shopDomain + '/admin/api/' + apiVersion + '/graphql.json';
            
            System.debug('üåê Endpoint: ' + endpoint);
            
            // Query simple sin variants
            String query = '{"query": "{ products(first: 2) { edges { node { id title } } } }"}';
            System.debug('üìù Query: ' + query);
            
            HttpRequest req = new HttpRequest();
            req.setEndpoint(endpoint);
            req.setMethod('POST');
            req.setHeader('Content-Type', 'application/json');
            req.setHeader('X-Shopify-Access-Token', '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');
            req.setBody(query);
            req.setTimeout(30000);
            
            Http http = new Http();
            HttpResponse res = http.send(req);
            
            System.debug('üìä Status: ' + res.getStatusCode());
            System.debug('üìä Body: ' + res.getBody());
            
            if (res.getStatusCode() == 200) {
                return 'Conexi√≥n exitosa - Status: ' + res.getStatusCode() + ' - Productos: ' + res.getBody().contains('products');
            } else {
                return 'Error - Status: ' + res.getStatusCode() + ' - Body: ' + res.getBody();
            }
            
        } catch (Exception e) {
            System.debug('‚ùå ERROR en prueba productos: ' + e.getMessage());
            System.debug('‚ùå Stack trace: ' + e.getStackTraceString());
            throw new AuraHandledException('Error en prueba productos: ' + e.getMessage());
        }
    }
    
    /**
     * @description M√©todo temporal para probar el parsing de la respuesta GraphQL
     */
    @AuraEnabled
    public static String testGraphQLParsing() {
        try {
            System.debug('üß™ PROBANDO PARSING DE RESPUESTA GRAPHQL');
            
            // Usar el mismo m√©todo que funciona
            List<Map<String, Object>> productNodes = getProductsFromGraphQL();
            
            System.debug('üìä Productos obtenidos: ' + productNodes.size());
            for (Map<String, Object> node : productNodes) {
                System.debug('üì¶ Producto: ' + node.get('title') + ' - ID: ' + node.get('id'));
            }
            
            return 'Parsing exitoso - Productos: ' + productNodes.size();
            
        } catch (Exception e) {
            System.debug('‚ùå ERROR en parsing: ' + e.getMessage());
            System.debug('‚ùå Stack trace: ' + e.getStackTraceString());
            throw new AuraHandledException('Error en parsing: ' + e.getMessage());
        }
    }
    
    /**
     * @description M√©todo para obtener precios de productos por separado
     */
    @AuraEnabled
    public static String testGetPrices() {
        try {
            System.debug('üß™ PROBANDO OBTENCI√ìN DE PRECIOS');
            
            String shopDomain = 'michelltemp.myshopify.com';
            String apiVersion = '2025-07';
            String endpoint = 'https://' + shopDomain + '/admin/api/' + apiVersion + '/graphql.json';
            
            // Query solo para precios
            String query = '{"query": "{ products(first: 2) { edges { node { id title variants(first: 1) { edges { node { price } } } } } }"}';
            System.debug('üìù Query: ' + query);
            
            HttpRequest req = new HttpRequest();
            req.setEndpoint(endpoint);
            req.setMethod('POST');
            req.setHeader('Content-Type', 'application/json');
            req.setHeader('X-Shopify-Access-Token', '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');
            req.setBody(query);
            req.setTimeout(30000);
            
            Http http = new Http();
            HttpResponse res = http.send(req);
            
            System.debug('üìä Status: ' + res.getStatusCode());
            System.debug('üìä Body: ' + res.getBody());
            
            if (res.getStatusCode() == 200) {
                return 'Precios obtenidos exitosamente - Status: ' + res.getStatusCode();
            } else {
                return 'Error - Status: ' + res.getStatusCode() + ' - Body: ' + res.getBody();
            }
            
        } catch (Exception e) {
            System.debug('‚ùå ERROR obteniendo precios: ' + e.getMessage());
            throw new AuraHandledException('Error obteniendo precios: ' + e.getMessage());
        }
    }
    
    /**
     * @description M√©todo temporal para probar la query con variants
     */
    @AuraEnabled
    public static String testVariantsQuery() {
        try {
            System.debug('üß™ PROBANDO QUERY CON VARIANTS');
            
            String shopDomain = 'michelltemp.myshopify.com';
            String apiVersion = '2025-07';
            String endpoint = 'https://' + shopDomain + '/admin/api/' + apiVersion + '/graphql.json';
            
            // Query simple con variants
            String query = '{"query": "{ products(first: 2) { edges { node { id title variants(first: 1) { edges { node { price } } } } } }"}';
            System.debug('üìù Query: ' + query);
            
            HttpRequest req = new HttpRequest();
            req.setEndpoint(endpoint);
            req.setMethod('POST');
            req.setHeader('Content-Type', 'application/json');
            req.setHeader('X-Shopify-Access-Token', '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');
            req.setBody(query);
            req.setTimeout(30000);
            
            Http http = new Http();
            HttpResponse res = http.send(req);
            
            System.debug('üìä Status: ' + res.getStatusCode());
            System.debug('üìä Body: ' + res.getBody());
            
            if (res.getStatusCode() == 200) {
                return 'Query con variants exitosa - Status: ' + res.getStatusCode();
            } else {
                return 'Error - Status: ' + res.getStatusCode() + ' - Body: ' + res.getBody();
            }
            
        } catch (Exception e) {
            System.debug('‚ùå ERROR en prueba variants: ' + e.getMessage());
            throw new AuraHandledException('Error en prueba variants: ' + e.getMessage());
        }
    }
    
    // ========================================
    // M√âTODOS DE CONEXI√ìN GRAPHQL
    // ========================================
    
    /**
     * @description Obtiene la moneda de la tienda Shopify
     */
    private static String getShopCurrency() {
        try {
            System.debug('üîÑ OBTENIENDO MONEDA DE LA TIENDA SHOPIFY');

            String shopDomain = 'michelltemp.myshopify.com';
            String apiVersion = '2025-07';
            String endpoint = 'https://' + shopDomain + '/admin/api/' + apiVersion + '/graphql.json';
            System.debug('üåê Endpoint: ' + endpoint);

            String query = '{"query": "{ shop { currencyCode } }"}';
            System.debug('üìù Query GraphQL: ' + query);

            HttpRequest req = new HttpRequest();
            req.setEndpoint(endpoint);
            req.setMethod('POST');
            req.setHeader('Content-Type', 'application/json');
            req.setHeader('X-Shopify-Access-Token', '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');
            req.setBody(query);
            req.setTimeout(120000);

            Http http = new Http();
            HttpResponse res = http.send(req);

            System.debug('üìä Response Status: ' + res.getStatusCode());
            System.debug('üìä Response Body: ' + res.getBody());

            if (res.getStatusCode() == 200) {
                Map<String, Object> responseMap = (Map<String, Object>)JSON.deserializeUntyped(res.getBody());
                Map<String, Object> data = (Map<String, Object>)responseMap.get('data');
                Map<String, Object> shop = (Map<String, Object>)data.get('shop');
                String currencyCode = (String)shop.get('currencyCode');
                
                System.debug('‚úÖ Moneda de la tienda: ' + currencyCode);
                return currencyCode != null ? currencyCode : 'USD';
            } else {
                System.debug('‚ö†Ô∏è Error obteniendo moneda, usando USD por defecto');
                return 'USD';
            }
        } catch (Exception e) {
            System.debug('‚ùå ERROR obteniendo moneda: ' + e.getMessage());
            return 'USD';
        }
    }

    /**
     * @description Obtiene productos desde GraphQL de Shopify
     */
    private static List<Map<String, Object>> getProductsFromGraphQL() {
        try {
            System.debug('üîÑ OBTENIENDO PRODUCTOS DESDE GRAPHQL');
            
            String shopDomain = 'michelltemp.myshopify.com';
            String apiVersion = '2025-07';
            String endpoint = 'https://' + shopDomain + '/admin/api/' + apiVersion + '/graphql.json';
            System.debug('üåê Endpoint: ' + endpoint);
            
            // Query simplificada que funciona (sin variants por ahora)
            String query = '{"query": "{ products(first: 10) { edges { node { id title handle productType status description tags variants(first: 1) { edges { node { price } } } } } }"}';
            System.debug('üìù Query GraphQL: ' + query);
            
            HttpRequest req = new HttpRequest();
            req.setEndpoint(endpoint);
            req.setMethod('POST');
            req.setHeader('Content-Type', 'application/json');
            req.setHeader('X-Shopify-Access-Token', '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');
            req.setBody(query);
            req.setTimeout(120000);
            
            Http http = new Http();
            HttpResponse res = http.send(req);
            
            System.debug('üìä Response Status: ' + res.getStatusCode());
            System.debug('üìä Response Body: ' + res.getBody());
            
            if (res.getStatusCode() == 200) {
                // Verificar si hay errores en la respuesta GraphQL
                Map<String, Object> responseMap = (Map<String, Object>)JSON.deserializeUntyped(res.getBody());
                
                // Verificar errores GraphQL
                if (responseMap.containsKey('errors')) {
                    List<Object> errors = (List<Object>)responseMap.get('errors');
                    System.debug('‚ùå Errores GraphQL: ' + errors);
                    throw new CalloutException('Errores GraphQL: ' + JSON.serialize(errors));
                }
                
                Map<String, Object> data = (Map<String, Object>)responseMap.get('data');
                if (data == null) {
                    throw new CalloutException('No hay datos en la respuesta GraphQL');
                }
                
                Map<String, Object> products = (Map<String, Object>)data.get('products');
                if (products == null) {
                    throw new CalloutException('No hay productos en la respuesta');
                }
                
                List<Object> edges = (List<Object>)products.get('edges');
                if (edges == null) {
                    throw new CalloutException('No hay edges en la respuesta');
                }
                
                List<Map<String, Object>> productNodes = new List<Map<String, Object>>();
                for (Object edgeObj : edges) {
                    Map<String, Object> edge = (Map<String, Object>)edgeObj;
                    Map<String, Object> node = (Map<String, Object>)edge.get('node');
                    if (node != null) {
                        productNodes.add(node);
                    }
                }
                
                System.debug('‚úÖ Productos obtenidos: ' + productNodes.size());
                return productNodes;
            } else {
                throw new CalloutException('Error en GraphQL: ' + res.getStatusCode() + ' - ' + res.getBody());
            }
        } catch (Exception e) {
            System.debug('‚ùå ERROR obteniendo productos: ' + e.getMessage());
            System.debug('‚ùå Stack trace: ' + e.getStackTraceString());
            throw new AuraHandledException('Error obteniendo productos: ' + e.getMessage());
        }
    }
    
    /**
     * @description Obtiene clientes desde GraphQL de Shopify
     */
    private static List<Map<String, Object>> getCustomersFromGraphQL() {
        try {
            System.debug('üîÑ OBTENIENDO CLIENTES DESDE GRAPHQL');
            
            String shopDomain = 'michelltemp.myshopify.com';
            String apiVersion = '2025-07';
            String endpoint = 'https://' + shopDomain + '/admin/api/' + apiVersion + '/graphql.json';
            System.debug('üåê Endpoint: ' + endpoint);
            
            String query = '{"query": "{ customers(first: 50) { edges { node { id firstName lastName email phone } } } }"}';
            System.debug('üìù Query GraphQL: ' + query);
            
            HttpRequest req = new HttpRequest();
            req.setEndpoint(endpoint);
            req.setMethod('POST');
            req.setHeader('Content-Type', 'application/json');
            req.setHeader('X-Shopify-Access-Token', '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');
            req.setBody(query);
            req.setTimeout(120000);
            
            Http http = new Http();
            HttpResponse res = http.send(req);
            
            System.debug('üìä Response Status: ' + res.getStatusCode());
            System.debug('üìä Response Body: ' + res.getBody());
            
            if (res.getStatusCode() == 200) {
                Map<String, Object> responseMap = (Map<String, Object>)JSON.deserializeUntyped(res.getBody());
                Map<String, Object> data = (Map<String, Object>)responseMap.get('data');
                Map<String, Object> customers = (Map<String, Object>)data.get('customers');
                List<Object> edges = (List<Object>)customers.get('edges');
                
                List<Map<String, Object>> customerNodes = new List<Map<String, Object>>();
                for (Object edgeObj : edges) {
                    Map<String, Object> edge = (Map<String, Object>)edgeObj;
                    Map<String, Object> node = (Map<String, Object>)edge.get('node');
                    customerNodes.add(node);
                }
                
                System.debug('‚úÖ Clientes obtenidos: ' + customerNodes.size());
                return customerNodes;
            } else {
                throw new CalloutException('Error en GraphQL: ' + res.getStatusCode() + ' - ' + res.getBody());
            }
        } catch (Exception e) {
            System.debug('‚ùå ERROR obteniendo clientes: ' + e.getMessage());
            throw new AuraHandledException('Error obteniendo clientes: ' + e.getMessage());
        }
    }
    
    /**
     * @description Obtiene √≥rdenes desde GraphQL de Shopify
     */
    private static List<Map<String, Object>> getOrdersFromGraphQL() {
        try {
            System.debug('üîÑ OBTENIENDO √ìRDENES DESDE GRAPHQL');
            
            String shopDomain = 'michelltemp.myshopify.com';
            String apiVersion = '2025-07';
            String endpoint = 'https://' + shopDomain + '/admin/api/' + apiVersion + '/graphql.json';
            System.debug('üåê Endpoint: ' + endpoint);
            
            String query = '{"query": "{ orders(first: 50) { edges { node { id orderNumber totalPriceSet { shopMoney { amount } } financialStatus email createdAt } } } }"}';
            System.debug('üìù Query GraphQL: ' + query);
            
            HttpRequest req = new HttpRequest();
            req.setEndpoint(endpoint);
            req.setMethod('POST');
            req.setHeader('Content-Type', 'application/json');
            req.setHeader('X-Shopify-Access-Token', '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');
            req.setBody(query);
            req.setTimeout(120000);
            
            Http http = new Http();
            HttpResponse res = http.send(req);
            
            System.debug('üìä Response Status: ' + res.getStatusCode());
            System.debug('üìä Response Body: ' + res.getBody());
            
            if (res.getStatusCode() == 200) {
                Map<String, Object> responseMap = (Map<String, Object>)JSON.deserializeUntyped(res.getBody());
                Map<String, Object> data = (Map<String, Object>)responseMap.get('data');
                Map<String, Object> orders = (Map<String, Object>)data.get('orders');
                List<Object> edges = (List<Object>)orders.get('edges');
                
                List<Map<String, Object>> orderNodes = new List<Map<String, Object>>();
                for (Object edgeObj : edges) {
                    Map<String, Object> edge = (Map<String, Object>)edgeObj;
                    Map<String, Object> node = (Map<String, Object>)edge.get('node');
                    orderNodes.add(node);
                }
                
                System.debug('‚úÖ √ìrdenes obtenidas: ' + orderNodes.size());
                return orderNodes;
            } else {
                throw new CalloutException('Error en GraphQL: ' + res.getStatusCode() + ' - ' + res.getBody());
            }
        } catch (Exception e) {
            System.debug('‚ùå ERROR obteniendo √≥rdenes: ' + e.getMessage());
            throw new AuraHandledException('Error obteniendo √≥rdenes: ' + e.getMessage());
        }
    }
}